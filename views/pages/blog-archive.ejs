<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <%- include('../partials/head', {header: {title: "Blog Archive", description: "Archive of all blog posts"}}); %>
</head>

<body>

    <header>
        <%- include('../partials/navigation', {page: "blog"}); %>
    </header>

    <div class="container my-4 py-5">
        <div class="row">
            <div class="col-xl-2 col-lg-2 col-md-12 col-sm-12 col-12">
                <%- include('../partials/blog-side-nav', {page: "archive"}); %>
            </div>
            <div class="col-12 col-sm-12 col-md-12 col-lg-10 col-xl-10">
                <div class="row">
                    <div class="col-12 mb-3">
                        <div class="form-group">
                            <input placeholder="Title or Date (YYYY-MM-DD)" type="text" id="txtFilter"
                                class="form-control">
                        </div>
                    </div>
                    <div class="col-12">
                        <table class="table table-sm table-striped table-bordered table-hover">
                            <tbody id="tblArchive">
                                <%pd.archiveElements.forEach(elm => {%>
                                <%-elm%>
                                <%})%>
                                <tr id="messageNoMatchingPosts" class="text-center" style="display: none;">
                                    <td colspan="2"><i>No Posts match your search term</i></td>
                                </tr>
                                <tr id="messageNoPostsFoundForSelectedDate" class="text-center" style="display: none;">
                                    <td colspan="2"><i>No Posts found for the selected date</i></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <footer>
        <%- include('../partials/footer'); %>
    </footer>
    <script>
        const txtFilter = $("#txtFilter");
        const tblArchive = $("#tblArchive");
        const postsList = $("[data-post-date]");
        const headersList = $("[data-header-date]");
        const messageNoMatchingPosts = $("#messageNoMatchingPosts");
        const messageNoPostsFoundForSelectedDate = $("#messageNoPostsFoundForSelectedDate");

        const filterHeadersByDate = (searchText) => {
            if (
                headersList !== undefined &&
                headersList !== null &&
                headersList.length > 0
            ) {
                let yearAndMonth = null;
                let atLeastOneFound = false;
                try {
                    yearAndMonth = searchText.substring(0, 7);
                } catch (e) {
                    yearAndMonth = null;
                }
                for (let i = 0; i < headersList.length; i++) {
                    const elm = $(headersList[i]);
                    const date = elm.attr("data-header-date");
                    if (date.startsWith(yearAndMonth)) {
                        elm.show();
                        atLeastOneFound = true;
                    } else {
                        elm.hide();
                    }
                }

                if (atLeastOneFound)
                    messageNoPostsFoundForSelectedDate.hide();
                else
                    messageNoPostsFoundForSelectedDate.show();
            }
        };

        const filterHeadersByDates = (datesList) => {
            if (
                headersList !== undefined &&
                headersList !== null &&
                headersList.length > 0
            ) {
                for (let i = 0; i < datesList.length; i++) {
                    try {
                        datesList[i] = datesList[i].substring(0, 7);
                    } catch (e) {}
                }

                for (let i = 0; i < headersList.length; i++) {
                    const elm = $(headersList[i]);
                    const date = elm.attr("data-header-date");
                    if (datesList.length === 0) {
                        elm.hide();
                        messageNoMatchingPosts.show();
                    } else {
                        messageNoMatchingPosts.hide();
                        let hasMatches = false;
                        for (let i1 = 0; i1 < datesList.length; i1++) {
                            if (date.startsWith(datesList[i1])) {
                                hasMatches = true;
                                break;
                            }
                        }
                        if (hasMatches) {
                            elm.show();
                        } else {
                            elm.hide();
                        }
                    }
                }
            } else {
                for (let i = 0; i < headersList.length; i++) {
                    const elm = $(headersList[i]);
                    elm.hide();
                }
            }
        };

        const filterPostsByDate = (searchText) => {
            if (
                postsList !== undefined &&
                postsList !== null &&
                postsList.length > 0
            ) {
                let atLeastOneFound = false;
                for (let i = 0; i < postsList.length; i++) {
                    const elm = $(postsList[i]);
                    const date = elm.attr("data-post-date");
                    if (date.startsWith(searchText)) {
                        elm.show();
                        atLeastOneFound = true;
                    } else {
                        elm.hide();
                    }
                }

                if (atLeastOneFound)
                    messageNoPostsFoundForSelectedDate.hide();
                else
                    messageNoPostsFoundForSelectedDate.show();
            }
        };

        const filterPostsByTitle = (searchText) => {
            let datesList = [];
            if (
                postsList !== undefined &&
                postsList !== null &&
                postsList.length > 0
            ) {
                for (let i = 0; i < postsList.length; i++) {
                    const elm = $(postsList[i]);
                    const title = elm.attr("data-archive-title");
                    const date = elm.attr("data-post-date");
                    if (title.toLowerCase().indexOf(searchText) > -1) {
                        elm.show();
                        datesList.push(date);
                    } else {
                        elm.hide();
                    }
                }
            }
            filterHeadersByDates(datesList);
        };


        txtFilter.on("keyup", () => {
            let searchText = txtFilter.val();
            if (
                searchText === undefined ||
                searchText === null ||
                searchText === ""
            ) {
                postsList.show();
                headersList.show();
                return;
            } else if (searchText.match(/^\d/)) {
                searchText = searchText.toLowerCase();
                filterHeadersByDate(searchText);
                filterPostsByDate(searchText);
            } else {
                searchText = searchText.toLowerCase();
                filterPostsByTitle(searchText);
            }
        });
    </script>
</body>

</html>